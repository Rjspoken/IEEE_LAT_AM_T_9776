# -*- coding: utf-8 -*-
"""Rama_Sr_RF (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aUkEs8JwdEDOMhH-ox0TXYKovF-4eaiW
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time

df = pd.read_csv('/content/drive/MyDrive/ML 2024/alldataset.csv')
print(df.shape)
df.head()

from google.colab import drive
drive.mount('/content/drive')

X = df.iloc[:, :4]
y = df.iloc[:, 4]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

from sklearn.ensemble import RandomForestRegressor

rf_regressor = RandomForestRegressor(n_estimators=100, random_state=0)

start_time = time.time()
rf_regressor.fit(X_train, y_train)
end_time = time.time()

print("Fit time: ", end_time - start_time)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

y_pred = rf_regressor.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE): ", mse)
print("Root Mean Squared Error (RMSE): ", rmse)
print("Mean Absolute Error (MAE): ", mae)
print("Mean Absolute Percentage Error (MAPE): ", mape)
print("R-squared (R2): ", r2)


start_time = time.time()
y_pred = rf_regressor.predict(X_test)
end_time = time.time()
print("Prediction time: ", end_time - start_time)



